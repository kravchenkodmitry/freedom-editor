const e=e=>{e.focus(),null!==e.firstChild&&window.getSelection().collapse(e.firstChild,e.firstChild.length)};var t={shiftBlockFocus:(t,o,r)=>{const i=[...t.querySelectorAll("[contenteditable]")],n=i.indexOf(document.activeElement);if(0!==n&&n!==i.length)switch(o){case"up":e(i[n-1]);break;case"down":e(i[n+1])}const s=r.querySelectorAll("[contenteditable]");switch(o){case"up":e(s[s.length-1]);break;case"down":e(s[0])}},moveBlock:(e,t)=>{if(!e.matches("[data-block-template]"))switch(t){case"up":if(!e.previousElementSibling)return;e.previousElementSibling.matches("[data-block-template]")||e.previousElementSibling.before(e);break;case"down":if(!e.nextElementSibling)return;e.nextElementSibling.matches("[data-block-template]")||e.nextElementSibling.after(e)}},getBlockInstanceList:e=>{const t=Object.values(e.options.registeredBlocks).map(e=>e.constructor.name);return[...e.editor.childNodes].map(o=>{const r=t.indexOf(o.dataset.blockType);if(-1!==r)return Object.values(e.options.registeredBlocks)[r]})}};const{shiftBlockFocus:o,moveBlock:r,getBlockInstanceList:i}=t;class n{constructor(e){if(void 0!==e&&"object"!=typeof e)throw new Error("You can only pass an object as constructor options for FreedomEditor");this.options={containerId:"freedom-editor",i18n:{locale:"en-US",rtl:"auto"},...e},this.editor=document.getElementById(this.options.containerId),this.editor.setAttribute("dir",this.options.i18n.rtl);const t=new CustomEvent("freedom-editor:after-select-editor-container",{detail:{editor:this.editor},cancelable:!0});if(window.dispatchEvent(t),null===this.editor)throw new Error("The given ID for initiating editor container returns null.");if(!this.options.defaultBlock)throw new Error("DefaultBlock must be defined when you initiate new editor.")}init(e){if(!0!==Array.isArray(e))throw new Error("You need to pass an array to init");return this.options.blocksControllers=e,this.editor}renderBlock(e,t,o,...r){if(void 0===e)throw new Error("Block object is not passed to renderBlock()");const i=e.render(this.options.i18n,o,...r);i.dataset.order=this.editor.childNodes.length,!0===t&&(i.dataset.blockTemplate=!0);[...this.options.blocksControllers,...e.options.controllers].forEach(e=>{e(i)});const n=new CustomEvent("freedom-editor:after-render-block",{detail:{blockType:i.dataset.blockType,block:i},cancelable:!0});return window.dispatchEvent(n),this.editor.append(i),i}removeBlock(e){e.matches("[data-block-template]")||(this.shiftBlockFocus(e,"up",e.previousElementSibling),e.remove())}loadBlocks(e){if(!e){if(!0!==Array.isArray(this.options.blockTemplate))throw new Error("You need to pass array for blockTemplate");if(this.options.blockTemplate.length>0)return this.options.blockTemplate.map(e=>this.renderBlock(e,!0))}return e.data.map(e=>{const t=Object.values(this.options.registeredBlocks).map(e=>e.constructor.name).indexOf(e.type);if(-1===t)throw new Error("You are trying to load a block that you haven't registered when you initzalize the editor");return this.renderBlock(this.options.registeredBlocks[t],!1,e.data)})}saveBlocks(){const e=[...this.editor.childNodes].map((e,t)=>i(this)[t].save(e)).filter(e=>void 0!==e);return{timestamp:Date.now(),data:e}}resetBlocks(){[...this.editor.childNodes].forEach(e=>{e.matches("[data-block-template]")?e.querySelectorAll("[contenteditable]").forEach(e=>{e.textContent=""}):e.remove()})}}n.prototype.shiftBlockFocus=o,n.prototype.moveBlock=r;var s=n;export default s;
