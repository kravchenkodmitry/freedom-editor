"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const{shiftBlockFocus:t,shiftFieldFocus:e,moveBlock:o,getRegisteredBlocksNameList:r,getBlockInstancesListFromDOM:i}=require("./utilities/helper.js");class s{constructor(t){if(void 0!==t&&"object"!=typeof t)throw new Error("You can only pass an object as constructor options for FreedomEditor");if(t.registeredBlocks=[...new Set(t.registeredBlocks)],this.options={containerId:"freedom-editor",i18n:{locale:"en-US",rtl:"auto"},...t},this.editor=document.getElementById(this.options.containerId),null===this.editor)throw new Error("The given ID for initiating editor container returns null.");this.editor.setAttribute("dir",this.options.i18n.rtl)}init(t){if(!this.options.defaultBlock)throw new Error("DefaultBlock must be defined when you initiate new editor.");if(!this.options.registeredBlocks.includes(this.options.defaultBlock))throw new Error("You need to register your options.defaultBlock at options.registeredBlocks");if(this.options.blockTemplate.forEach(t=>{if(!this.options.registeredBlocks.includes(t))throw new Error("You need to register blocks used in your block template at ptions.registeredBlocks.")}),!0!==Array.isArray(this.options.blockTemplate))throw new Error("You need to pass an array as value for options.blockTemplate");if(!0!==Array.isArray(t))throw new Error("You need to pass an array to init");return this.options.blocksControllers=t,this.editor}renderBlock(t,e,o){if(void 0===t)throw new Error("Block object is not passed to renderBlock()");const r=t.render(this.options.i18n,o);r.dataset.order=this.editor.childNodes.length,r.dataset.blockTemplate="true"===e;return this.options.blocksControllers.map(e=>{const o=t.options.controllers.find(t=>e.constructor.name===t.constructor.name);return Object.assign(e,o)}).forEach(t=>{t.init(this,r)}),this.editor.append(r),r}removeBlock(t){t.matches('[data-block-template="true"]')||1===this.editor.childNodes.length||(t!==this.editor.firstElementChild?this.shiftBlockFocus(t,"up",t.previousElementSibling):this.shiftBlockFocus(t,"down",t.nextElementSibling),t.remove())}loadBlocks(t){return t?t.data.map(t=>{const e=r(this).indexOf(t.type);if(-1===e)throw new Error("You are trying to load a block that you haven't registered when you initzalize the editor");return this.renderBlock(this.options.registeredBlocks[e],t.isTemplateBlock,t)}):this.options.blockTemplate.length>0?this.options.blockTemplate.map(t=>this.renderBlock(t,"true")):this.renderBlock(this.options.defaultBlock,"false")}saveBlocks(){const t=[...this.editor.childNodes].map((t,e)=>i(this)[e].save(t)).filter(t=>void 0!==t);return{timestamp:Date.now(),data:t}}resetBlocks(){[...this.editor.childNodes].forEach(t=>{t.matches('[data-block-template="true"]')?t.querySelectorAll("[contenteditable]").forEach(t=>{t.textContent=""}):t.remove()}),0===this.editor.childNodes.length&&this.renderBlock(this.options.defaultBlock,!1,null)}}s.prototype.shiftFieldFocus=e,s.prototype.shiftBlockFocus=t,s.prototype.moveBlock=o,exports.FreedomEditor=s;
